{% extends 'base.html.twig' %}

{% block body_id 'blog_index' %}

{% block main %}
    <pre>
        <code class="php">
public function getPostsAsObjects($id)
{
    return $this->createQueryBuilder('p')
        ->where('p.id < :id')
        ->setParameter('id', $id)
        ->getQuery()
        ->getResult();
}
        </code>
    </pre>
    {{ dump(postsAsObjects) }}
    <pre>
        <code class="php">
            public function getOnlyPostTitles($id)
            {
            return $this->createQueryBuilder('p')
            ->select('p.title')
            ->where('p.id < :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
            }
        </code>
    </pre>
    {{ dump(onlyPostTitles) }}
    <pre>
        <code class="php">
            public function getPostAsPartialObjects($id)
            {
            return $this->createQueryBuilder('p')
            ->select('partial p.{id, title}')
            ->where('p.id < :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
            }
        </code>
    </pre>
    {{ dump(postAsPartialObjects) }}
    <pre>
        <code class="php">
            public function getPostsAsListWithCustomHydrator($id)
            {
            return $this->createQueryBuilder('p')
            ->select('p.id, p.title')
            ->where('p.id < :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult('KeyValueListHydrator'); // custom hydrator is a php class and needs to be defined in config.yml
            }
        </code>
    </pre>
    {{ dump(postsAsListWithCustomHydrator) }}
    <pre>
        <code class="php">
            public function getPostsWithRawDQL($id)
            {
            return $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM AppBundle:Post p
            WHERE p.id < :id
            ORDER BY p.publishedAt DESC
            ')
            ->setParameter('id', $id)
            ->getResult()
            ;
            }
        </code>
    </pre>
    {{ dump(postsWithRawDQL) }}
    <pre>
        <code class="php">
            public function getPostsWithRawSQL($id)
            {
            return $this->getEntityManager()
            ->getConnection()
            ->executeQuery('
            SELECT p.*
            FROM symfony_demo_post p
            WHERE p.id < '.$id.'
            ORDER BY p.publishedAt DESC
            ')  // ouch...
            ->fetchAll();
            }
        </code>
    </pre>
    {{ dump(postsWithRawSQL) }}
    <pre>
        <code class="php">
            public function getPostsWithNativeQuery($id)
            {
            $rsm = new ResultSetMappingBuilder($this->getEntityManager());
            $rsm->addRootEntityFromClassMetadata(Post::class, 'p');

            return $this->getEntityManager()
            ->createNativeQuery('
            SELECT p.*
            FROM symfony_demo_post p
            WHERE p.id < :id
            ORDER BY p.publishedAt DESC
            ', $rsm)
            ->setParameter('id', $id)
            ->getResult();
            }
        </code>
    </pre>
    {{ dump(postsWithNativeQuery) }}
    <pre>
        <code class="php">
            public function getPostsWithPreparedQuery()
            {
            $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare('
            SELECT p.*
            FROM symfony_demo_post p
            ORDER BY p.publishedAt DESC
            ');

            $stmt->execute();

            return $stmt->fetchAll();
            }
        </code>
    </pre>
    {{ dump(postsWithPreparedQuery) }}

{% endblock %}
